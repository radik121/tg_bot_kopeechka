from conf import KP_API
from aiogram import types
from bot_loader import dp, bot
from keyboards import start_menu, code_or_msg_menu, api_menu, back, send_code
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
import asyncio
from additional_func import check, mailbox_reorder, mailbox_message, parse_facebook



class Form(StatesGroup):
    services = State()
    code_or_text = State()
    api = State()
    you_api = State()
    email = State()
    send_message = State()


async def set_default_commands(dp):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞"""

    await dp.bot.set_my_commands([
        types.BotCommand("start", "–£—Å–ª—É–≥–∏"),
        types.BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å")
    ])


async def first_command(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start"""

    await Form.services.set()
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É', reply_markup=start_menu)


async def cancel_handler_state(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å"""

    current_state = await state.get_state()
    match current_state:
        case None:
            return
    await state.finish()
    await message.reply('–•–æ—Ä–æ—à–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start', reply_markup=ReplyKeyboardRemove())


async def check_correctness_name_service(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ–π —É—Å–ª—É–≥–∏"""

    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —É—Å–ª—É–≥—É.", reply_markup=start_menu)


async def second_command(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—å: –ö–û–î –∏–ª–∏ –°–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º"""

    await Form.next()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?', reply_markup=code_or_msg_menu)


async def select_code_or_message(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API"""

    match message.text:
        case '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            await state.set_state(Form.services)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.", reply_markup=start_menu)
        case _:
            await state.update_data(code_or_text = message.text)
            await state.set_state(Form.api)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞!', reply_markup=api_menu)


async def select_api(message: types.Message, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫–∞–∫–æ–µ API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏ –≤–≤–µ—Å—Ç–∏ email"""

    match message.text:
        case '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            await state.set_state(Form.code_or_text)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?', reply_markup=code_or_msg_menu)
        case '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API':
            await state.update_data(api = KP_API)
            await state.set_state(Form.email)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ email –∞–∫–∫–∞—É–Ω—Ç–∞', reply_markup=back)
        case '–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π API':
            await state.set_state(Form.you_api)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API', reply_markup=back)
    await state.update_data(site = 'facebook.com')
    # data = await state.get_data()
    # print(data)


async def input_api(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ API –∏ email"""

    match message.text:
        case '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            await state.set_state(Form.api)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞!', reply_markup=api_menu)
        case _:
            await state.update_data(api = message.text)
            await state.set_state(Form.email)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ email –∞–∫–∫–∞—É–Ω—Ç–∞', reply_markup=back)
    # data = await state.get_data()
    # print(data)
        

async def input_email(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥–∏–º email –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞ kopeechka"""

    match check(message.text):
        case '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            await state.set_state(Form.api)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞!', reply_markup=api_menu)
        case True:
            await state.update_data(email = message.text)
            await message.answer("–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ—á—Ç—É...")

            data = await state.get_data()
            # print(data)
            response = mailbox_reorder(data['api'], data['site'], data['email'])
            print('mailbox_reorder:', response['status'])

            match response['status']:
                case 'OK':
                    await state.update_data(task_id = response['id'])
                    await state.set_state(Form.send_message)
                    await message.answer("–ü–æ—á—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                    await message.answer(
                        f"–ù–∞ —Å–∞–π—Ç–µ {data['site']} –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ –ø–æ—á—Ç–µ', –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ <b>'–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'</b>",
                        reply_markup=send_code
                    )
                case _:
                    await message.answer(
                        "API –∏–ª–∏ email –∏–ª–∏ —Å–∞–π—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø–æ—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∏—Ö",
                        reply_markup=api_menu
                    )
                    await state.set_state(Form.api)
        case _:
            await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email –∞–¥—Ä–µ—Å!')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ email –∞–∫–∫–∞—É–Ω—Ç–∞', reply_markup=back)
    # data1 = await state.get_data()
    # print(data1)


async def process_get_code(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç –∫–æ–ø–µ–µ—á–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥"""

    await message.answer("–°–µ–π—á–∞—Å –ø–æ–ª—É—á–∏–º –∫–æ–¥...–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç –æ–∫–æ–ª–æ 1 –º–∏–Ω.")
    await asyncio.sleep(60)
    data = await state.get_data()
    response = mailbox_message(token=data['api'], full='1', id=data['task_id'])
    print(f"mailbox_message: {response['status']} - {response['value']}")
    match response['status']:
        case 'OK':
            match data['code_or_text']:
                case '–ö–û–î':
                    message_email = parse_facebook(str(response['fullmessage']))
                case '–°–æ–æ–±—â–µ–Ω–∏–µ':
                    message_email = response['fullmessage']        
            await bot.send_message(message.from_user.id, message_email, reply_markup=start_menu)
            await Form.services.set()
        case _:
            await bot.send_message(
                message.from_user.id,
                "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ –∏–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>'–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'</b>",
                reply_markup=send_code
            )


def register_client():
    # dp.register_message_handler(set_default_commands)
    dp.register_message_handler(first_command, commands='start', state=None)
    dp.register_message_handler(cancel_handler_state, commands='cancel', state='*')
    dp.register_message_handler(cancel_handler_state, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(check_correctness_name_service, lambda message: message.text != 'üì© –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ –ø–æ—á—Ç—ã kopeechka', state=Form.services)
    dp.register_message_handler(second_command, state=Form.services)
    dp.register_message_handler(select_code_or_message, state=Form.code_or_text)
    dp.register_message_handler(select_api, state=Form.api)
    dp.register_message_handler(input_api, state=Form.you_api)
    dp.register_message_handler(input_email, state=Form.email)
    dp.register_message_handler(process_get_code, lambda message: message.text == "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", state=Form.send_message)